#+TITLE: Emacs Config
#+AUTHOR: Céleste Ornato <celeste.ornato1@gmail.com>

* Important
** Packages
#+begin_src emacs-lisp
  (setq package-list '(
    lsp-mode lsp-ui flycheck dap-mode vertico magit company
    crux expand-region multiple-cursors org-bullets
    auctex-cluttex auctex-latexmk
   )
  )
  (dolist (package package-list)
     (unless (package-installed-p package)
       (package-install package)))
  (company-mode)
  (multiple-cursors-mode)
#+end_src
** Straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (use-package evil)
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
  (evil-mode)
#+end_src
** LSP
#+begin_src emacs-lisp
  (setq lsp-keymap-prefix "C-l")
  (require 'lsp-mode)
  (add-hook 'prog-mode-hook #'lsp)
#+end_src


* Nice to Have
** Theme
#+begin_src emacs-lisp
    (setq package-list
      '(gruvbox-theme borland-blue-theme monokai-pro-theme)
    )
    (dolist (package package-list)
       (unless (package-installed-p package)
         (package-install package)))
    (require 'monokai-pro-theme)
        ;(load-theme 'monokai-pro)

  (straight-use-package
    '(nano :type git :host github :repo "rougier/nano-emacs"))


  (require 'nano-base-colors)
  (require 'nano-faces)
  (require 'nano-theme)
  (require 'nano-help)
  (require 'nano-modeline)
  (require 'nano-colors)
  (load-theme 'monokai-pro)

#+end_src
** Binds
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-c g") 'magit)
  (global-set-key (kbd "C-c e") 'org-babel-execute-buffer)
#+end_src

** Org
#+begin_src emacs-lisp
     (lambda () (progn
          (setq left-margin-width 2)
          (setq right-margin-width 2)
          (set-window-buffer nil (current-buffer))))
    (setq org-startup-indented t
          org-bullets-bullet-list '(" ") ;; no bullets, needs org-bullets package
          org-ellipsis "  " ;; folding symbol
          org-pretty-entities t
          org-hide-emphasis-markers t
          ;; show actually italicized text instead of /italicized text/
          org-agenda-block-separator ""
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t)
    (font-lock-add-keywords 'org-mode
       '(("^ *\\([-]\\) "
     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t) (ocaml . t) (C . t) (emacs-lisp . nil) ))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** Latex
#+begin_src emacs-lisp
  (require 'auctex-latexmk)
    (auctex-cluttex-mode)
  (require 'auctex-latexmk)
    (prettify-symbols-mode)
#+end_src

** Misc.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode t)
(setq-default tab-width 4) ; Assuming you want your tabs to be four spaces wide
#+end_src
** EXWM
#+begin_src emacs-lisp
(package-install 'exwm)
  (require 'exwm)
  ;; Set the initial workspace number.
  (setq exwm-workspace-number 4)
  ;; Make class name the buffer name.
  (add-hook 'exwm-update-class-hook
    (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
  ;; Global keybindings.
  (setq exwm-input-global-keys
        `(([?\s-r] . exwm-reset) ;; s-r: Reset (to line-mode).
          ([?\s-w] . exwm-workspace-switch) ;; s-w: Switch workspace.
          ([?\s-&] . (lambda (cmd) ;; s-&: Launch application.
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command cmd nil cmd)))
          ;; s-N: Switch to certain workspace.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  ;; Enable EXWM
;;  (exwm-enable)
#+end_src
