#+TITLE: Emacs Config
#+AUTHOR: CÃ©leste Ornato <celeste.ornato1@gmail.com>

* Important
** Packages
#+begin_src emacs-lisp
  (setq package-list '(
    lsp-mode lsp-ui flycheck dap-mode vertico magit company
    crux expand-region multiple-cursors org-bullets fuzzy-finder linum-off
    auctex-cluttex auctex-latexmk format-all org-modern
    gruvbox-theme borland-blue-theme
   )
  )
  (dolist (package package-list)
     (unless (package-installed-p package)
       (package-install package)))
  (company-mode)
  (multiple-cursors-mode)
#+end_src
** Straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (use-package evil)
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
  (evil-mode)
#+end_src
** LSP
#+begin_src emacs-lisp
  (setq lsp-keymap-prefix "C-l")
  (require 'lsp-mode)
  (add-hook 'prog-mode-hook #'lsp)
#+end_src

* Nice to Have
** Theme
Stolen from [https://github.com/thriveth/Gruvbox-goodies]
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :ensure nil
    :config
    (progn
      (defvar after-load-theme-hook nil
        "Hook run after a color theme is loaded using `load-theme'.")
      (defadvice load-theme (after run-after-load-theme-hook activate)
        "Run `after-load-theme-hook'."
        (run-hooks 'after-load-theme-hook))
      (defun customize-gruvbox ()
        "Customize gruvbox theme"
        (if (member 'gruvbox custom-enabled-themes)
            (custom-theme-set-faces
             'gruvbox
             '(cursor                 ((t (:foreground "#928374"))))
             '(org-block              ((t (:foreground "#ebdbb2":background "#1c2021" :extend t))))
             '(org-block-begin-line   ((t (:inherit org-block :background "#1d2021" :foreground "#665c54" :extend t))))
             '(org-block-end-line     ((t (:inherit org-block-begin-line))))
             '(org-document-info      ((t (:foreground "#d5c4a1" :weight bold))))
             '(org-document-info-keyword    ((t (:inherit shadow))))
             '(org-document-title     ((t (:foreground "#fbf1c7" :weight bold :height 1.4))))
             '(org-meta-line          ((t (:inherit shadow))))
             '(org-target             ((t (:height 0.7 :inherit shadow))))
             '(org-link               ((t (:foreground "#b8bb26" :background "#32302f" :overline nil))))  ;;
             '(org-indent             ((t (:inherit org-hide))))
             '(org-indent             ((t (:inherit (org-hide fixed-pitch)))))
             '(org-footnote           ((t (:foreground "#8ec07c" :background "#32302f" :overline nil))))
             '(org-ref-cite-face      ((t (:foreground "#fabd2f" :background "#32302f" :overline nil))))  ;;
             '(org-ref-ref-face       ((t (:foreground "#83a598" :background "#32302f" :overline nil))))
             '(org-ref-label-face     ((t (:inherit shadow :box t))))
             '(org-drawer             ((t (:inherit shadow))))
             '(org-property-value     ((t (:inherit org-document-info))) t)
             '(org-tag                ((t (:inherit shadow))))
             '(org-date               ((t (:foreground "#83a598" :underline t))))
             '(org-verbatim           ((t (:inherit org-block :background "#3c3836" :foreground "#d5c4a1"))))
             '(org-code               ((t (:inherit org-verbatim :background "#3c3836" :foreground "#fe8019"))))
             '(org-quote              ((t (:inherit org-block :slant italic))))
             '(org-level-1            ((t (:foreground "#83a598" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-level-2            ((t (:foreground "#8ec07c" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Aqua
             '(org-level-3            ((t (:foreground "#b8bb26" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Green
             '(org-level-4            ((t (:foreground "#fabd2f" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Yellow
             '(org-level-5            ((t (:foreground "#fe8019" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Orange
             '(org-level-6            ((t (:foreground "#fb4934" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Red
             '(org-level-7            ((t (:foreground "#d3869b" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-headline-done      ((t (:foreground "#928374" :background "#282828" :weight bold :overline nil :extend t)))) ;; Gray
             '(org-ellipsis           ((t (:inherit shadow :height 1.0 :weight bold :extend t))))
             '(org-table              ((t (:foreground "#d5c4a1" :background "#3c3836"))))

             ;; Doom-modeline settings
             '(doom-modeline-evil-insert-state   ((t (:foreground "#b8bb26" :weight bold)))) ;; Green
             '(doom-modeline-evil-emacs-state    ((t (:foreground "#b16286" :weight bold)))) ;; Purple
             '(doom-modeline-evil-normal-state   ((t (:foreground "#83a598" :weight bold)))) ;; Blue
             '(doom-modeline-evil-visual-state   ((t (:foreground "#fbf1c7" :weight bold)))) ;; Beige
             '(doom-modeline-evil-replace-state  ((t (:foreground "#fb4934" :weight bold)))) ;; Red
             '(doom-modeline-evil-operator-state ((t (:foreground "#fabd2f" :weight bold)))) ;; Yellow
             '(mode-line                         ((t (:background "#504945" :foreground "#d5c4a1"))))
             '(mode-line-inactive                ((t (:background "#3c3836" :foreground "#7c6f64"))))
             '(link                              ((t (:foreground "#b8bb26" :overline t))))

             '(line-number                       ((t (:background "#32302f" :foreground "#665c54"))))
             ;; Mu4E mail client faces
             '(mu4e-header-face                  ((t (:foreground "#d5c4a1" :background "#282828"))))
             '(mu4e-replied-face                 ((t (:inherit mu4e-header-face :foreground "#b8bb26"))))
             '(mu4e-draft-face                   ((t (:inherit mu4e-header-face :foreground "#fabd2f"))))
             '(mu4e-link-face                    ((t (:inherit mu4e-face :foreground "#8ec07c" :underline t))))
             '(mu4e-forwarded-face               ((t (:inherit mu4e-header-face :foreground "#80c07c"))))
             '(mu4e-flagged-face                 ((t (:inherit mu4e-header-face))))
             '(mu4e-header-highlight-face        ((t (:underline nil :background "#3c3836"))))
             '(mu4e-unread-face                  ((t (:foreground "#fbf1c7" :weight bold))))  ;; Originally #83a598
             '(mu4e-cited-1-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-2-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-3-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-4-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-5-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-6-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-7-face                 ((t (:foreground "#b16286" :slant italic))))
             '(mu4e-cited-8-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-9-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-10-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-11-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-12-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-13-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-14-face                 ((t (:foreground "#b16286" :slant italic))))
             '(pdf-view-midnight-colors           '("#d5c4a1" . "#282828"))
             )
            (setq org-n-level-faces 8)
          ) ;; test
        )
      (add-hook 'after-load-theme-hook 'customize-gruvbox)
      )
      (load-theme 'gruvbox t)
      (enable-theme 'gruvbox)
    )
  (straight-use-package
    '(nano :type git :host github :repo "rougier/nano-emacs"))


  (require 'nano-base-colors)
  (require 'nano-faces)
  (require 'nano-theme)
  (require 'nano-help)
  (require 'nano-modeline)
  (require 'nano-colors)
#+end_src
** Binds
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-c g") 'magit)
  (global-set-key (kbd "C-c e") 'org-babel-execute-buffer)
  (global-set-key (kbd "C-c f") 'fuzzy-finder)
  (global-set-key (kbd "C-c C-f") 'fuzzy-finder)
  (global-set-key (kbd "C-c /") 'fuzzy-finder-goto-gitgrep-line)
#+end_src

** Org
#+begin_src emacs-lisp
       (lambda () (progn
            (setq left-margin-width 2)
            (setq right-margin-width 2)
            (set-window-buffer nil (current-buffer))))
      (setq org-startup-indented t
            org-pretty-entities t
            org-hide-emphasis-markers t
            ;; show actually italicized text instead of /italicized text/
            org-agenda-block-separator ""
            org-fontify-whole-heading-line t
            org-fontify-done-headline t
            org-fontify-quote-and-verse-blocks t)
      (font-lock-add-keywords 'org-mode
         '(("^ *\\([-]\\) "
       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â¢"))))))


    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t) (ocaml . t) (C . t) (emacs-lisp . nil)))

    (setq org-confirm-babel-evaluate nil)

  (add-hook 'org-mode-hook #'my-org-faces)
  (add-hook 'org-mode-hook #'org-modern-mode)
#+end_src
** Latex
#+begin_src emacs-lisp
  (require 'auctex-latexmk)
    (auctex-cluttex-mode)
  (require 'auctex-latexmk)
    (prettify-symbols-mode)
#+end_src
** Misc
#+begin_src emacs-lisp
    (setq-default indent-tabs-mode t)
    (setq-default tab-width 4) ; Assuming you want your tabs to be four spaces wide
  (electric-pair-mode)
(add-hook 'prog-mode-hook 'format-all-mode)
#+end_src
** EXWM
#+begin_src emacs-lisp
(package-install 'exwm)
  (require 'exwm)
  ;; Set the initial workspace number.
  (setq exwm-workspace-number 4)
  ;; Make class name the buffer name.
  (add-hook 'exwm-update-class-hook
    (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
  ;; Global keybindings.
  (setq exwm-input-global-keys
        `(([?\s-r] . exwm-reset) ;; s-r: Reset (to line-mode).
          ([?\s-w] . exwm-workspace-switch) ;; s-w: Switch workspace.
          ([?\s-&] . (lambda (cmd) ;; s-&: Launch application.
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command cmd nil cmd)))
          ;; s-N: Switch to certain workspace.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  ;; Enable EXWM
;;  (exwm-enable)
#+end_src

** Bad Theme
#+begin_src emacs-lisp

  (global-set-key (kbd "C-c M-t") (
    lambda () (interactive)
        (load-theme 'gruvbox)
        (set-face-attribute 'default nil :font "Caskaydia Cove Nerd Font" :height 160)
        (menu-bar-mode -1)
        (tool-bar-mode -1)
        (scroll-bar-mode -1)
  ))
  (global-set-key (kbd "C-c t") (
    lambda () (interactive)
        (load-theme 'borland-blue)
        (set-face-attribute 'default nil :font "Unifont Bold" :height 190)
        (menu-bar-mode)
        (tool-bar-mode)
        (scroll-bar-mode)
  ))
#+end_src
